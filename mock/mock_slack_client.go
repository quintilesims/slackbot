// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quintilesims/slack (interfaces: SlackClient)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/quintilesims/slack"
)

// MockSlackClient is a mock of SlackClient interface
type MockSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClientMockRecorder
}

// MockSlackClientMockRecorder is the mock recorder for MockSlackClient
type MockSlackClientMockRecorder struct {
	mock *MockSlackClient
}

// NewMockSlackClient creates a new mock instance
func NewMockSlackClient(ctrl *gomock.Controller) *MockSlackClient {
	mock := &MockSlackClient{ctrl: ctrl}
	mock.recorder = &MockSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlackClient) EXPECT() *MockSlackClientMockRecorder {
	return m.recorder
}

// AddReminder mocks base method
func (m *MockSlackClient) AddReminder(arg0, arg1, arg2, arg3 string) error {
	ret := m.ctrl.Call(m, "AddReminder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReminder indicates an expected call of AddReminder
func (mr *MockSlackClientMockRecorder) AddReminder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReminder", reflect.TypeOf((*MockSlackClient)(nil).AddReminder), arg0, arg1, arg2, arg3)
}

// GetUserInfo mocks base method
func (m *MockSlackClient) GetUserInfo(arg0 string) (*slack.User, error) {
	ret := m.ctrl.Call(m, "GetUserInfo", arg0)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (mr *MockSlackClientMockRecorder) GetUserInfo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockSlackClient)(nil).GetUserInfo), arg0)
}
